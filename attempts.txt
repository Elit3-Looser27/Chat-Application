#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <thread>
#include <mutex>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/err.h>
#include <openssl/evp.h>


#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "libcrypto.lib")
#pragma comment(lib, "libssl.lib")

extern std::mutex mtx;

class ClientHandler {
    SOCKET clientSocket;
    int clientNumber;
    std::string username;
    std::string privateKey;
    std::string publicKey;
    std::vector<ClientHandler*>& allClients;
    static const int NUMBER_OF_MESSAGES_TO_SEND = 15;

public:
    ClientHandler(SOCKET socket, int number, std::vector<ClientHandler*>& clients)
        : clientSocket(socket), clientNumber(number), allClients(clients) {
        std::cout << "New connection with user " << username << " at socket " << socket << std::endl;
    }

    void run() {
        try {
            if (authenticateUser()) {
                enterChatRoom();
            }
        }
        catch (const std::exception& e) {
            std::cerr << "Error handling client# " << clientNumber << ": " << e.what() << std::endl;
        }
        // This will be executed whether an exception was thrown or not
        closeConnection();
    }
    


    bool authenticateUser() {
        std::string option;
        std::string username, password;
        bool authenticated = false;

        while (!authenticated) {
            std::cout << "Type 'signup' to register or 'login' to access your account: ";
            std::cin >> option;

            if (option == "signup") {
                std::cout << "Choose a username: ";
                std::cin >> username;
                std::cout << "Choose a password: ";
                std::cin >> password;
                authenticated = registerUser(username, password);
                if (!authenticated) {
                    std::cout << "Registration failed. Please try again.\n";
                }
            }
            else if (option == "login") {
                std::cout << "Username: ";
                std::cin >> username;
                std::cout << "Password: ";
                std::cin >> password;
                authenticated = loginUser(username, password);
                if (!authenticated) {
                    std::cout << "Login failed. Please try again or sign up.\n";
                }
            }
        }

        return authenticated;
    }



    bool registerUser(const std::string& username, const std::string& password) {
        // Check if a user with the same username already exists
        std::ifstream in("credentials.txt");
        std::string usr, pwd, pubKey, privKey;
        while (in >> usr >> pwd >> pubKey >> privKey) {
            if (usr == username) {
                std::cout << "A user with the same username already exists.\n";
                return false;
            }
        }
        in.close();

        std::string publicKey, privateKey;
        if (!generateRSAKeys(publicKey, privateKey)) {
            std::cerr << "Failed to generate RSA keys.\n";
            return false;
        }
        this->publicKey = publicKey; // Store the public key as a member of ClientHandler
        this->privateKey = privateKey; // Store the private key as well

        std::string singleLinePublicKey = replaceAll(publicKey, "\n", "<NL>");
        std::string singleLinePrivateKey = replaceAll(privateKey, "\n", "<NL>");

        std::ofstream out("credentials.txt", std::ios::app);
        if (out) {
            out << username << " " << password << " " << singleLinePublicKey << " " << singleLinePrivateKey << "\n";
            out.close();
            this->username = username;
            std::cout << "User " << this->username << " registered successfully." << std::endl << std::endl << "Please Type in your Display name " << std::endl;;
            return true;
        }
        return false;
    }

    bool loginUser(const std::string& username, const std::string& password) {
        std::ifstream in("credentials.txt");
        std::string usr, pwd, pubKey, privKey;
        while (in >> usr >> pwd >> pubKey >> privKey) {
            if (usr == username && pwd == password) {
                this->username = username;
                this->privateKey = replaceAll(privKey, "<NL>", "\n"); // Load the private key for session use
                this->publicKey = replaceAll(pubKey, "<NL>", "\n"); // Load the public key for session use
                std::cout << "User " << this->username << " logged in successfully." << std::endl;
                return true;
            }
        }
        return false;
    }

    std::string replaceAll(std::string str, const std::string& from, const std::string& to) {
        size_t start_pos = 0;
        while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
            str.replace(start_pos, from.length(), to);
            start_pos += to.length();
        }
        return str;
    }

    bool generateRSAKeys(std::string& publicKey, std::string& privateKey) {
        EVP_PKEY* pkey = NULL;
        EVP_PKEY_CTX* pkey_ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
        if (!pkey_ctx)
            return false;

        if (EVP_PKEY_keygen_init(pkey_ctx) <= 0)
            return false;

        if (EVP_PKEY_CTX_set_rsa_keygen_bits(pkey_ctx, 2048) <= 0)
            return false;

        if (EVP_PKEY_keygen(pkey_ctx, &pkey) <= 0)
            return false;

        // To write the keys into strings we use BIOs
        BIO* bioPublic = BIO_new(BIO_s_mem());
        BIO* bioPrivate = BIO_new(BIO_s_mem());

        if (!PEM_write_bio_PUBKEY(bioPublic, pkey) || !PEM_write_bio_PrivateKey(bioPrivate, pkey, NULL, NULL, 0, NULL, NULL)) {
            EVP_PKEY_free(pkey);
            BIO_free_all(bioPublic);
            BIO_free_all(bioPrivate);
            return false;
        }

        // Extract the keys from the BIOs to the std::string
        size_t pub_len = BIO_pending(bioPublic);
        size_t pri_len = BIO_pending(bioPrivate);
        char* pub_key = new char[pub_len + 1];
        char* pri_key = new char[pri_len + 1];

        BIO_read(bioPublic, pub_key, static_cast<int>(pub_len));
        BIO_read(bioPrivate, pri_key, static_cast<int>(pri_len));
        pub_key[pub_len] = '\0';
        pri_key[pri_len] = '\0';

        publicKey = std::string(pub_key);
        privateKey = std::string(pri_key);

        delete[] pub_key;
        delete[] pri_key;

        EVP_PKEY_free(pkey);
        BIO_free_all(bioPublic);
        BIO_free_all(bioPrivate);

        return true;
    }
    std::string encryptMessage(const std::string& message, const std::string& publicKeyPEM) {
        // Load public key
        BIO* bio = BIO_new_mem_buf((void*)publicKeyPEM.c_str(), -1);
        EVP_PKEY* pubKey = PEM_read_bio_PUBKEY(bio, NULL, NULL, NULL);
        BIO_free(bio);

        // Encrypt the message
        EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new(pubKey, NULL);
        EVP_PKEY_encrypt_init(ctx);
        EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_OAEP_PADDING);

        size_t outlen;
        EVP_PKEY_encrypt(ctx, NULL, &outlen, (unsigned char*)message.c_str(), message.length());  // Determine buffer size
        unsigned char* outbuf = (unsigned char*)malloc(outlen);
        if (!outbuf) {
            EVP_PKEY_CTX_free(ctx);
            EVP_PKEY_free(pubKey);
            return "";
        }

        if (EVP_PKEY_encrypt(ctx, outbuf, &outlen, (unsigned char*)message.c_str(), message.length()) <= 0) {
            free(outbuf);
            EVP_PKEY_CTX_free(ctx);
            EVP_PKEY_free(pubKey);
            return "";
        }

        std::string encryptedMessage((char*)outbuf, outlen);
        free(outbuf);
        EVP_PKEY_CTX_free(ctx);
        EVP_PKEY_free(pubKey);

        return encryptedMessage;
    }
    std::string decryptMessage(const std::string& encryptedMessage) {
        // Load private key
        BIO* bio = BIO_new_mem_buf((void*)privateKey.c_str(), -1);
        EVP_PKEY* privKey = PEM_read_bio_PrivateKey(bio, NULL, NULL, NULL);
        BIO_free(bio);

        // Decrypt the message
        EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new(privKey, NULL);
        EVP_PKEY_decrypt_init(ctx);
        EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_OAEP_PADDING);

        size_t outlen;
        EVP_PKEY_decrypt(ctx, NULL, &outlen, (unsigned char*)encryptedMessage.c_str(), encryptedMessage.length());  // Determine buffer size
        unsigned char* outbuf = (unsigned char*)malloc(outlen);
        if (!outbuf) {
            EVP_PKEY_CTX_free(ctx);
            EVP_PKEY_free(privKey);
            return "";
        }

        if (EVP_PKEY_decrypt(ctx, outbuf, &outlen, (unsigned char*)encryptedMessage.c_str(), encryptedMessage.length()) <= 0) {
            free(outbuf);
            EVP_PKEY_CTX_free(ctx);
            EVP_PKEY_free(privKey);
            return "";
        }

        std::string decryptedMessage((char*)outbuf, outlen);
        free(outbuf);
        EVP_PKEY_CTX_free(ctx);
        EVP_PKEY_free(privKey);

        return decryptedMessage;
    }



    std::string getRecipientPublicKey(const std::string& recipientUsername) {
        for (auto* client : allClients) {
            if (client->username == recipientUsername) {
                return client->publicKey;
            }
        }
        return ""; // Return an empty string if no public key found
    }

    void enterChatRoom() {
        std::string message, recipientUsername;
        while (true) {
            std::cout << "Enter recipient's username: ";
            std::getline(std::cin, recipientUsername);
            std::cout << "Enter your message: ";
            std::getline(std::cin, message);
            if (message == "exit") break;

            std::string publicKey = getRecipientPublicKey(recipientUsername);
            if (publicKey.empty()) {
                std::cout << "Recipient not found or has no public key." << std::endl;
                continue;
            }

            std::string encryptedMessage = encryptMessage(message, publicKey);
            saveMessageToFile(encryptedMessage);  // Save the encrypted message
            broadcastMessageToClients(encryptedMessage);
        }
    }

    void saveMessageToFile(const std::string& message) {
        std::ofstream out("encrypted_messages.txt", std::ios::app);
        if (out) {
            out << message << std::endl;  // Save the encrypted message to file
            out.close();
        }
    }

    std::string signMessage(const std::string& message) {
        EVP_PKEY* evp_privateKey = loadPrivateKey(this->privateKey);
        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();
        const EVP_MD* md = EVP_sha256();

        EVP_SignInit(mdctx, md);
        EVP_SignUpdate(mdctx, message.c_str(), message.length());

        unsigned char* sig = new unsigned char[EVP_PKEY_size(evp_privateKey)];
        unsigned int siglen;

        EVP_SignFinal(mdctx, sig, &siglen, evp_privateKey);

        std::string signature(reinterpret_cast<char*>(sig), siglen);
        delete[] sig;

        EVP_MD_CTX_free(mdctx);
        EVP_PKEY_free(evp_privateKey);

        return signature;
    }

    EVP_PKEY* loadPrivateKey(const std::string& pemPrivateKey) {
        BIO* bio = BIO_new_mem_buf((void*)pemPrivateKey.c_str(), -1);
        EVP_PKEY* pkey = PEM_read_bio_PrivateKey(bio, NULL, NULL, NULL);
        BIO_free(bio);
        return pkey;
    }

    void broadcastMessageToClients(const std::string& message) {
        std::lock_guard<std::mutex> lock(mtx);
        for (auto* client : allClients) {
            if (client->isAuthenticated()) {
                std::string messageWithUsername = this->username + ": " + message;
                std::cout << "Broadcasting to user " << client->username << std::endl;
                // Simulate sending a message
                send(client->clientSocket, messageWithUsername.c_str(), messageWithUsername.size(), 0);
            }
        }
    }

    bool isAuthenticated() const {
        return !username.empty();
    }

    void closeConnection() {
        closesocket(clientSocket);
        std::cout << "Connection with user" << username << " closed" << std::endl;
    }
};

//// Rename main to startClient
//void startClient() {
//    WSADATA wsaData;
//    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
//        std::cerr << "WSAStartup failed." << std::endl;
//        return ;
//    }
//
//    std::vector<ClientHandler*> allClients;
//    SOCKET socket = INVALID_SOCKET; // Placeholder for actual socket initialization
//    ClientHandler handler(socket, 1, allClients);
//    std::thread clientThread(&ClientHandler::run, &handler);
//    clientThread.join();
//
//    WSACleanup();
//    return;
//}
--------------------------------------

#include <iostream>
#include <string>
#include <regex>
#include <thread>
#include <winsock2.h>
#include <ws2tcpip.h>
#include "Client-Handler.cpp"

#pragma comment(lib, "Ws2_32.lib")

std::mutex mtx;

class Client {
private:
    std::vector<ClientHandler*> allClients;
    std::string username;
    public:
        bool isValidAddress(const std::string& address) {
            std::regex ipPattern(R"((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))");
            return std::regex_match(address, ipPattern);
        }
    SOCKET socket_fd;



    void startListenerThread() {
        std::thread([this]() {
            try {
                char buffer[1024] = { 0 };
                while (true) {
                    int bytes_received = recv(this->socket_fd, buffer, sizeof(buffer), 0);
                    if (bytes_received == SOCKET_ERROR || bytes_received == 0) {
                        throw std::runtime_error("Connection to the server lost or closed.");
                    }
                    std::string response(buffer, bytes_received);
                    std::cout << response << std::endl;
                }
            }
            catch (const std::exception& e) {
                std::cerr << "Error: " << e.what() << std::endl;
                exit(0);
            }
            }).detach();
    }

public:
    Client() : socket_fd(INVALID_SOCKET) {
        WSADATA wsaData;
        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
            throw std::runtime_error("WSAStartup failed");
        }
    }

    ~Client() {
        if (socket_fd != INVALID_SOCKET) {
            closesocket(socket_fd);
        }
        WSACleanup();
    }

    void connectToServer(const std::string& serverAddress, int port) {
        struct sockaddr_in server;

        if ((socket_fd = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
            throw std::runtime_error("Socket creation failed with error");
        }

        server.sin_family = AF_INET;
        server.sin_port = htons(port);

        if (inet_pton(AF_INET, serverAddress.c_str(), &server.sin_addr) <= 0) {
            throw std::invalid_argument("Invalid address / Address not supported");
        }

        if (connect(socket_fd, reinterpret_cast<struct sockaddr*>(&server), sizeof(server)) == SOCKET_ERROR) {
            closesocket(socket_fd);
            throw std::runtime_error("Connection failed with error");
        }
        

        std::cout << "Server running on [" << serverAddress << ":" << port << "]\n";
        std::cout << "Type 'exit' to quit\n";

        startListenerThread();

        ClientHandler handler(socket_fd, 0, allClients);  // Create a ClientHandler instance
        username = handler.authenticateUser();// Create a ClientHandler instance
        if (username.empty()) {  // If the returned username is empty, authentication failed
            throw std::runtime_error("Authentication failed");
        }

        send(socket_fd, username.c_str(), static_cast<int>(username.length()), 0);  // Send the username to the server
        // Enter the chat room
        handler.enterChatRoom();
    }



  /*  void sendMessage() {
        std::string message;
        while (true) {
            std::getline(std::cin, message);
            if (message == "exit") {
                break;
            }
            std::string messageWithUsername = this->username + ": " + message;
            send(socket_fd, message.c_str(), static_cast<int>(message.length()), 0);
        }
    }*/
};

int main() {
    try {
        Client client;
        std::string serverAddress;
        int port;

        std::cout << "Enter server address: ";
        std::getline(std::cin, serverAddress);
        while (!client.isValidAddress(serverAddress)) {
            std::cout << "Invalid server address, try again: ";
            std::getline(std::cin, serverAddress);
        }

        std::cout << "Enter port: ";
        std::cin >> port;
        std::cin.ignore(); // Ignore newline after the integer input

        client.connectToServer(serverAddress, port);
        /*client.sendMessage();*/
    }
    catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }


    return 0;
}
-----------------------------------

Begad Begad123 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmTj3Q+fHaTKtTn2RGNrJ
27TgaKsVBl+16VJUb6FTvfFtR9BzbwbKqE0tkypbzFmLz8wKDjtdgwgWAw5NqBGL
OSpBe4ffQbAfQqyatjUzaPdOBPRewALWWQDgX8M4BcOfd1bnPCSkp94PJurNgMk8
EVNkUK3xQM55P9nxyVaf7kDxdbehTyouM0fY0yCGoQB+3MppzKWgrcyHO15myAjk
PpfcX0Yt5oUpJyzFja4uQnvA0dkJgTjpFDmQhDilRamzrYekFaA//Ayclug9pdW0
is61ntbnINvkF3psmZqCWRgGozdbqqOPAs/XwtthQbQqOupPbIcL29jufqnoM+9H
PQIDAQAB
-----END PUBLIC KEY-----
 -----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCZOPdD58dpMq1O
fZEY2snbtOBoqxUGX7XpUlRvoVO98W1H0HNvBsqoTS2TKlvMWYvPzAoOO12DCBYD
Dk2oEYs5KkF7h99BsB9CrJq2NTNo904E9F7AAtZZAOBfwzgFw593Vuc8JKSn3g8m
6s2AyTwRU2RQrfFAznk/2fHJVp/uQPF1t6FPKi4zR9jTIIahAH7cymnMpaCtzIc7
XmbICOQ+l9xfRi3mhSknLMWNri5Ce8DR2QmBOOkUOZCEOKVFqbOth6QVoD/8DJyW
6D2l1bSKzrWe1ucg2+QXemyZmoJZGAajN1uqo48Cz9fC22FBtCo66k9shwvb2O5+
qegz70c9AgMBAAECggEADmvythUES24GKuudsxmwwzm4n5Fuxq1OiXoC0Yj9QVUO
hKJlow8gFwxAnGfxwP+yranWTnWe/RzPOZVokMep84T7Kd3lkSC7KILngvvp7VjN
oqC/pFIAC9uNwuW0ibJaeZiX5izKxLQdd/vEwPjv6u+O8xsUKJXmirCAVgONxRZ5
bScPvf5rJ2wmn2AEUpu0i6poL1FWT1um6pmSZyOKhhusb1FsVLFSb2o9fngvRy8W
mH5lRi4QMwGEdbTLjO6iTNGAqntOxMhohOr7+RfMK0m8aAnTDLpWIRyYQGCsmi44
/01oADLg10KCkUSS56CtRQtxOIb+lpgKzdP0QOBXfwKBgQDRGhzLvD0wKvaufhP/
qsKKTkQKGnt/ILlRc2m3RGjxoQHH6smsnpEFD6z9Q3iBevqsPWh3muWtpGeP+Ohr
kiCnK9y7siT2QSO3sjiYqMrvY3mwuSCDpMZcNIkppwWiSRDivZIxs4rMN3QnH0Ud
0mDf04d9pK/bNUsPb9SHFkIK7wKBgQC7lnQ4x7q1Hxv6z/Lpqs/91m16tDJ8/aYH
pF54096g5MCoiBSvArPfANUM4fOIU3OkpdQ+n9zlhshAMp1i3G1WUX4w3v180HZW
nR4AKc+ELhR6CzL+AxznN4M0wV0+ZptKwwmFnb/tDr3Tojt48Th8MjGGmj4bsFfR
/Y7tgC0AkwKBgQCvGY7DjP4wN8oalLlqfzQpXSDc1RBVhLGq41rDfSXkMU+seZAo
XSBTfKz/6GAhDTqcwU+Z2Lw8jE+s4GLAsb1mP/S3uJX7INEoIrYCIFbP4B0nP99a
XcE9tUCnAJZXL5hURysFM7QnDsjVefoG3wUAacIsFJyulBIm+x6dgKYNQQKBgQCG
8x7bNjyITkAHuI/NMDf/KcKK0pW7u5I0zzezfuAbKVW8KGGQ4cXauTOL2AUl3rtE
CJRfFQyKBuOK45673029GlVI/TKpFyL6/n71qR6Dvc63WdUuTbj+Ub5PNohI+vHe
3966xBithrxjQsO8JvT2y/k7Fz11F/Clvd6T13EIhwKBgQCENThEAQXErK/nbPVv
jQEdn5DspLBcfE0WFV2NSgGyU7DjsHz6IgeGSnOfHCXiWSxLOI5evH67/pT7diXY
XVwGe6QZCSYbiMLxgWJIzN30mS+X1U5yU9dW3ORbffT48PzRPN5tpuUltKLQrsAx
OrniYvlEUgyB8P/lSu4ehRR34w==
-----END PRIVATE KEY-----

Ahmed Ahmed123 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5jjMQ0XvyIkWBrgCi1IA
N1J/vPhIcM4uuxQWvLxb0numb21bnwkHv2/FiMWHo46F5s7sVKDeQOM5IIeOScjx
AQ+d59vgEQhZ/Yzz3HFqL0byVTCv1S63FGMZCBhnz0vcgJITsTft7xUKQ4OWK7o3
YBRN7kYjypcHGHpSaLE3KkRwJGDRoGm9Q/Hxe5BBBu2sTG3it4wmmzMZUWyYlBuF
Okls63Tp7yAijosXc2lq3Fhm0PDvcRVjC6cHka9D/OVvXX2HlcfRCM4IVh36yONP
YNkJwe/vbAWRd1gEEEEVpk9qZFfAX9F2bpKPxzsnCHe5BnuSuqwrIJBOOBCM2B/P
oQIDAQAB
-----END PUBLIC KEY-----
 -----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDmOMxDRe/IiRYG
uAKLUgA3Un+8+Ehwzi67FBa8vFvSe6ZvbVufCQe/b8WIxYejjoXmzuxUoN5A4zkg
h45JyPEBD53n2+ARCFn9jPPccWovRvJVMK/VLrcUYxkIGGfPS9yAkhOxN+3vFQpD
g5YrujdgFE3uRiPKlwcYelJosTcqRHAkYNGgab1D8fF7kEEG7axMbeK3jCabMxlR
bJiUG4U6SWzrdOnvICKOixdzaWrcWGbQ8O9xFWMLpweRr0P85W9dfYeVx9EIzghW
HfrI409g2QnB7+9sBZF3WAQQQRWmT2pkV8Bf0XZuko/HOycId7kGe5K6rCsgkE44
EIzYH8+hAgMBAAECggEAAg4VvK/+IPMgUDUKSMYVnGjPHRe2RdOBVUgrn8mqpClY
Zfw66iOBfzL3N25T9KDMDzBfqa257ihZFTJAkeYKSLEj/rLWwDAr5XiBoMEeaoee
mCYUG7oMBlGQIqNdIduSf09Of7F5HT451jpxd7h00BW+UFct8JwCgzRsUeTrEiR/
6iCzwnB5ssvawQP22sIWN6A1wVaMSi3uAAJ1UP2dH8Vcpxs8rcVvFcxDcLbacwN1
onnlf2pxh6yU+ARLDotJdjrYLXihwGc4rzOUlzZKfZBCHorTuTJvuLNzh6NFvRTm
/IHva/ONnNUEHrS2nBELdfNqaVTJBEJmZttuAH/KsQKBgQD2H8++mRMY5zmEfqwT
mH0SPHgTLZeruO7Wm0J6/KcFam+bX07U05/fXmH35yry4cog6fsgGal+MT5d+fdb
UOCwP7Xz4V56ZdiJfL3CZjgmjEqiyZu7dc2Ko100q3FbjG+Hi84wjh7GBYPfeNLc
koR0qhoYxQn60sgTeVKsiOixnQKBgQDvdaMQx1hVCVVJKTaBIsJx7aPPvJWupAfK
1Xi9/zLO2bP/upVUHoPTfzcFvSCjzDWXw0gXaPOTaCT9WeazWuksur8ViSv52Tvp
cKwEZqip/O0QaUFFBJcF5Ih+ZcXvVYvV+dRsbC8pBXIL40RE3kB+IHuTA40IBkUY
f8zRBjmo1QKBgHRSqJ7OPgZhEgAa1j0Urtf1mFKIE8znRIpNKuhxjIa0vTbTnrBb
rI2nT+oYaWYNbLiNnVCYkFDB+VX1FAEmgmsKUXaIJ1z10Zd5Sz4bjaI6X/P8EQxS
KujBOQXxmUvJXdTUMIkmQkkYxjDSK+ZvoQZ6docKaSMQh9scVgSRWFjJAoGAf/iO
PNlMC6YBPigYSMsav2gQs2RFWh+vSmbrMB7COGmAGJrOUzY7nTvPW/HHD8KCoahr
Tpd4FL8DhaIV+KQNGSp0FD5KkivWKNteErwKR040IyEdEJVzYGLRzzr0nQNKx//L
1mW6jmGqoU/DnEpqjP0vDVJIfJFdO8qQ2uRIzEECgYEArVoJ3uRQWjpCLkUofR/0
kV7wSny8N/DbEkqyeMYap8PzQcWKbhwO1yWHMROvynZGAVpR1de4bLMYTshlMmaw
GTI/sWs/Xn2hZHktTTiDV/Hgf48z4gt1VBdbqfCn517P7A2Uxi1nX0+eLA6kel/a
wsgyKU4Df+Vb7ISDJOfoeoA=
-----END PRIVATE KEY-----

Omar Omar123 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvGmGQr0/wjYf3VVWbKlj
lunJjY+m0hXjOo5jZn3ItyQTgQCTtFXbts+mDfnRVmZ87sM1SbrixqnIcancNlRF
8pL7PoLEQMj1VG09sPqi2rp1fahN41nXYGQHkKMDTqBlpAr1CR+JvW/UzLPJNma/
+DCwh35NZUBW/Z+MMxU3tEVHFXzAyWt0KCT/9r0sopvxFjkEwql65ZbgA8EAsgsL
zZOUGrt/WyeznwdNyFoIAdwl/9rWAEi2i8ss22Caty8xAOwG6ukQb8k1qjSNEwmj
LF/G+O4vRr8IlUS+LWVcsPs7rXnL1MOfrFMb3ifKTYtaiXLTVIHotjTCtkEoDxKk
xwIDAQAB
-----END PUBLIC KEY-----
 -----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC8aYZCvT/CNh/d
VVZsqWOW6cmNj6bSFeM6jmNmfci3JBOBAJO0Vdu2z6YN+dFWZnzuwzVJuuLGqchx
qdw2VEXykvs+gsRAyPVUbT2w+qLaunV9qE3jWddgZAeQowNOoGWkCvUJH4m9b9TM
s8k2Zr/4MLCHfk1lQFb9n4wzFTe0RUcVfMDJa3QoJP/2vSyim/EWOQTCqXrlluAD
wQCyCwvNk5Qau39bJ7OfB03IWggB3CX/2tYASLaLyyzbYJq3LzEA7Abq6RBvyTWq
NI0TCaMsX8b47i9GvwiVRL4tZVyw+zutecvUw5+sUxveJ8pNi1qJctNUgei2NMK2
QSgPEqTHAgMBAAECggEAQJfc05yV8zsjCXpsOqyH3AEifEm3Y2blk/mk0kplOYRA
u4U7HiQhQzdFMp1myzwvsJtz9WcAwCMM+QrG2ElkAZmqUO/74EoE8YDSGY6TrnEm
PoIo0bzHPeCNR2TbiWUr82VeRFZvnmZsihFI9kGbprbqjkkat4+rQyAjrI+lnUNa
6+zRvCyBOjNJKKrjrEu3NWy7/UIORaL2iICO1CS0ecjxjuxOO+pFRLAoze4oJFjp
LfIzyhrevdhDL+I2nty54soUrhXwRUzBGTDJV8nsR7tAWz1zbXMxZ1HJ6O1HxuK2
tt84X3VzvOFqlVeDa2+qvRurNCNec5VAD3jaVJxRQQKBgQD7/vjzNxiIhr9fW0VG
JnZO5V3ebGy8HIbdfrgkNCbn6ZJ1Ey2OUWr27N11+ahjsjZTIWbOhBTl81Ab+ih2
KvZ/hdX1j8ilE/B2KnMeUosbWVVOUsTRSNmBjIpJQtXsSERVhLMONhr/+0kpRWu/
xXaS3hdXizRlJXCRPXe3soiu2QKBgQC/Z+qaeDqczIGG8tY9FqgILUGWnP5PxBSo
GmW1A9gZ4ZKbaGHPlTGgOQ1LoznvkvOPEKOukCJlKj5wLWgDuIdZTAGzjw2pKx1E
VKo0otUrbFFumA7bbeRyXAzjudlPRgC2vgP1MR5yXM0nzEHMPcHaQWlVxzj5qifT
iBcIwC7snwKBgQDwIUkz4vWy68yjXoMF1RL6HaG0mVeIbhqqKN3qSfQlHLOecrb/
nmAyiwaCLHSlBCa2Uub3tm9/rLtS3a/+4vPgEzYO+YP2oqiKwerPI1NBrYAX0dGR
qTzzMWx5YYIe1cKgR4Kk8TQLaHaQKIIDzXQvggl2N8Wm+OVq0csqNqv/CQKBgQCf
q8GS0L8cdKGNAODlnxPXlmFDkn237vvIbBTyV12b4Ygaqo4FzBDU9yL3ORgome8i
JqBVDBoVSJNDoy1FBVerj3NP5gNgXv4QNYyzUi8ABWE9IA4s0NSk7dM22Z/FuMD5
sTO+BBbBEld2Xrd4+P/Q4YZMr2ABLggBN2L3wtKiQwKBgAYSMSYezX+yEwPhkvn1
1OugQ5AeRoY24oiTixrwEfYcm7/7lCeu3OiYGk+AxqWZZdV4YuzrFMhJG+mpu/9C
xueBrpAqzCYKKs4/qqpvyhaLaStT8hYA0DT78ryf6jNDO6f1mxf9wF1gVN87ocMG
EOPe8FJTwviBX4MQQ7zhpNIR
-----END PRIVATE KEY-----

Ziad Ziad123 -----BEGIN PUBLIC KEY-----<NL>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtBBFZTqs869csO3b4Txx<NL>ffIbiM6I/T+FoP+kFkf+L6aO6aWnXyka8kD6tXeLR/RLZ0bixd5a1A4GY3T3s/oL<NL>jEjACpmUmmmeykFe7h+D+fC9BhepfK22EA2KN26+YWK0yvbiNjpw0JmOeB9TygBk<NL>vxFPQ9syj+j397td69hclCNbE2jRE8l6AImSkn9K4+PjorhbyQMMMqCeq08S4qR7<NL>zXKXcu0fyJIICARyR1hvc7BDXT0FFA72kQOkBbW1v8fwnHKiN+L37bdMO2TKV9h7<NL>lNn5ZY6l+fcpnU1F8neKdz+cUWlqz+InYn1V1m6yj/d31mhp9XQNIQ2S9Umi4hW3<NL>zwIDAQAB<NL>-----END PUBLIC KEY-----<NL> -----BEGIN PRIVATE KEY-----<NL>MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC0EEVlOqzzr1yw<NL>7dvhPHF98huIzoj9P4Wg/6QWR/4vpo7ppadfKRryQPq1d4tH9EtnRuLF3lrUDgZj<NL>dPez+guMSMAKmZSaaZ7KQV7uH4P58L0GF6l8rbYQDYo3br5hYrTK9uI2OnDQmY54<NL>H1PKAGS/EU9D2zKP6Pf3u13r2FyUI1sTaNETyXoAiZKSf0rj4+OiuFvJAwwyoJ6r<NL>TxLipHvNcpdy7R/IkggIBHJHWG9zsENdPQUUDvaRA6QFtbW/x/CccqI34vftt0w7<NL>ZMpX2HuU2flljqX59ymdTUXyd4p3P5xRaWrP4idifVXWbrKP93fWaGn1dA0hDZL1<NL>SaLiFbfPAgMBAAECggEAVfu7F5bIRelEatx6dfjF/S1ihpaRhdUSe4n3kgg40gpI<NL>DjxjSya2zl3HGmaGZQq8AwoveesvFjnIRS/ypMfPQeLviWBDPOUYxV4n9a+o9u5F<NL>ZSZhcb8FxG6ixMumL5zR1mXEKb8IZiQdizDycvBzK2YZor6GS4AlAPBA7kE4HChj<NL>F6xnG41HciCUQO5HI3S4eRmDX1sfl6dLZvTkIxOBNzzzPoHOAZ85SrwOtyxsnXa7<NL>8TEfRhb01AldrfG5USv6DRsAxgX5gBJgviqIB7ji8M2m/1tPhT954VAvjTvvNfZ7<NL>RPd9n1O201RuklYfZbocvqt4iPYIMQdcw+wV1XEWSQKBgQD1I4srjeaGb/C1Pq1w<NL>Eew/rmr8m41Ea5uujkNyswrtOt7tY0EYUwoc67dDp7BflrQBtqEWxSI+ZeGkhfIT<NL>ggh0G01A2HeRQwJBk4kJJfhsrUFxx953gNMUQmXL0QtAZIDCqPm8O6QsAuF682QV<NL>RlbHnTYHioqwS36WEdsqYzalqwKBgQC8Cp6Hn+mvC0JjadYoMN4DLG1FUis57REA<NL>2R9lhIWJm/l6xIMASiyDaQVbKb7i8lEIbkeSmR4OE8S82BdGPTbAjAAvlnMvMC06<NL>GLXjBrFJVql4/Vp2Rk0IVXrtOQsjLVeIOnadLE0t9agPi3uePvTd/li3HLIi/+L7<NL>6aIjkomKbQKBgCovWa2/F6Ke9N9bz+DvVKaIz2R1KFRT6FCbrsO4R/MXJHHZmMQk<NL>1iKv9bOw0ctBVezNjt8qQYBXbAMyAbyVrfq9EAhOuBTJYUQDrZtja2LYVeDMsl4C<NL>T1C3NGlkqfkE0putFHzuDox8Wm0cIWb/2cM0LK4Ti1ZXR4tvuzWKKUdNAoGBAK4c<NL>fxFBRlTn7f6y3rK0HL1/g2XuYUvvcBEC+Yk8HZF/NI8yKcI46+J5eZYhnzfv+ov9<NL>4JOi5ytNrprU0ygcQfgjKYDmo5yL1TS38KJXbgxkC+OVYw+kpGsVCw9gBCn8L9JZ<NL>n76EaKonjgdmtX2e+Ygbm/VgwqiZmoh6mcCqTGQ5AoGAYFB8o38D/zTRGQnoPoBF<NL>pBLfH7rU/zFPRsDidSdYfsV5Gc5rflTQ5RTVAeZiP+MH5SiuHMZ7c2Tr9POaA11a<NL>kTFDjc+/AV/sQZcVi3Bzsh2DV4cLtgRODfHHE99nYFRJzkwVhMIg7/sD0km9Ax02<NL>T8zJWbw3grqDHzIcRmMX8Uk=<NL>-----END PRIVATE KEY-----<NL>
Enas Enas123 -----BEGIN PUBLIC KEY-----<NL>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqml1UQ4O3kuRQDdpi7xl<NL>e8tR9vOQ/n2Uo2j/FgUy5H7tjK0IdqHOLsSR+ivez4S3wUJ6z70Du5H0mA7S4SP9<NL>rSOEpN90agL5tqZTa6NikpBADagrvqSCBFCHBM/16Ywtk7zWxb3NKyr7mE3tPaV1<NL>OP+8YP2HDDY11ey06F9mdALQYTGz/QvSWerXTQdkf8kMMp88Nwvfb0ZPHnww0KpF<NL>74t7/hrGrAjUm4M9kedZhEHx7mIj04FNf2XV2h4LCGI48sP5FokUo1N/GhZTgNfZ<NL>Kc6T2R8T40EtGOgGqGi+C9uCNIm+ndB2sP3W6GwqwczksE1rGDbrEIh3r4bjJWdQ<NL>ewIDAQAB<NL>-----END PUBLIC KEY-----<NL> -----BEGIN PRIVATE KEY-----<NL>MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqaXVRDg7eS5FA<NL>N2mLvGV7y1H285D+fZSjaP8WBTLkfu2MrQh2oc4uxJH6K97PhLfBQnrPvQO7kfSY<NL>DtLhI/2tI4Sk33RqAvm2plNro2KSkEANqCu+pIIEUIcEz/XpjC2TvNbFvc0rKvuY<NL>Te09pXU4/7xg/YcMNjXV7LToX2Z0AtBhMbP9C9JZ6tdNB2R/yQwynzw3C99vRk8e<NL>fDDQqkXvi3v+GsasCNSbgz2R51mEQfHuYiPTgU1/ZdXaHgsIYjjyw/kWiRSjU38a<NL>FlOA19kpzpPZHxPjQS0Y6AaoaL4L24I0ib6d0Haw/dbobCrBzOSwTWsYNusQiHev<NL>huMlZ1B7AgMBAAECggEAFHJt5KlaqFqJ1ZowfFdBF/732Tk1WwvHY2oMPWCnUBpY<NL>t2nlm5JjkmH8n/dWlzC1+abX5Igp4/4pynrw25m9bOJXno6/QZ8UxlEjrkUe5TYQ<NL>sXLNuOS1Qv5EjRPEzl6G83STkotpDDZulMI45o4tSAcLW9nfs9vnTsFFnaIgwWeI<NL>3Y9agotqAQSanj5gpCnwhifY4nxr4kXq62LJygrpl+ga8aYIMif1D7Zry0bkVfO5<NL>fDMvSKuM4YhiYXLz37e0FwDplFq2Ng2zDrfIxDqnhN328FaqPMIvKCSNcVWQ6uyz<NL>0ZoFeBSg4um92jE3/W0/sGmhg+7FyYdrTy4U67V1vQKBgQDZx8rbX1JMQQuGOCOy<NL>YrMAeYLPT2udo5ACZoqePlpBfJMCRJvL0zlGFWGyiaF5o0YQwvtZlPhG7/vleV7B<NL>GwTd7tm/rgwjaIq+qps8DebUNIknpgerUsBkfK5f7e3F7zSvbkuOplzoympTmwrr<NL>bA/su4Fs9gMsfqUsvt/qrc7ORwKBgQDIUYtvrUW9GhLIUizeMUBpHyTjdgOBsiFF<NL>TWH/R5+tG9ApD2T5HYfH9mpaa6ik6OBryxB4PeO5ONLqvCbzgM5QIpDbVJZRMc1B<NL>zB9iIX2BI+hN1Ovc778levqvqymnV5K6iw/wpJQHivoq/2g9q3tEkf8wRFfsM+0Q<NL>jG8Jd8uCLQKBgHqviyA6eupqWkuqpLGB2MWTrpWLcFzGIAK6Ma0kA0SRIWBNtlcF<NL>D2bj9L3XuxgDWx1mOqMkwRl1aLrFvROcXQmJ3TGWo0/vPPpcskcKrdcuIXYsmnVx<NL>kOELPFDegOzY7R1HTVl3by/VmECxP12Q6we6OhdgIDmYvwSOIybZ839RAoGAVSi9<NL>g2OBM0wjUgAFTQxZGpd/4icohHmKxWCJWbJEQp6BVwNRZMpWD/9E5V3BWyIZThoM<NL>zWFaL0Ll/56vXHOUweJ//I4wPSJT5TX23YvpQ/5U4smy38EYXMG0UvwMADUtjppR<NL>03bT64T8p0zfLuB4zgTXHNjhG+xTSua4yaig3p0CgYAplSnyx5i0g88Kj+1KxpSP<NL>447AvSaKIVe0r43NeOSzAqVRLvaxjkgVPK6GCAqFk2WIHfE0fp0oIBo/6UaS4rwO<NL>3GZJsb9ZJp0DZf3AX4iP57lTZJCt/wJBz8rdLLHBOjYsIefb3caf6EQ3ErA1/c/b<NL>K9c06xapI+hPZONWfs6seQ==<NL>-----END PRIVATE KEY-----<NL>
Mai Mai123 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlH0AZ4sSpvJaUDkVjOmX
azm+gVRmTiUNY1vJ4kqiKAK6HIhoU8Hlc2rA9WhUmS0xeRz9PTacittuGvqbT1yV
MHg+oLVoiJBQKvX/eMUspXsgqM3DRBtQCKfWk6YwYJfUFgBhTfQUam402Qq5x+0y
ZpUOawkzjQf80l529g1YSw7WDqPq6ysd4fSNSWXU25IVZkFEMHEK4XUMBLd1O2nA
vB4PEkQfYNhzu2S6GXeab7B92/U7KnglTX7k23mi9g4tqhacW6gMBALjV0BR1F8T
JtjJXUWCCPJVkP7OtpnuBBrt0q1SRAgMyNjyce4SuUW5vu5vMwbaWebZXpNfPEM2
KQIDAQAB
-----END PUBLIC KEY-----
 -----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCUfQBnixKm8lpQ
ORWM6ZdrOb6BVGZOJQ1jW8niSqIoArociGhTweVzasD1aFSZLTF5HP09NpyK224a
+ptPXJUweD6gtWiIkFAq9f94xSyleyCozcNEG1AIp9aTpjBgl9QWAGFN9BRqbjTZ
CrnH7TJmlQ5rCTONB/zSXnb2DVhLDtYOo+rrKx3h9I1JZdTbkhVmQUQwcQrhdQwE
t3U7acC8Hg8SRB9g2HO7ZLoZd5pvsH3b9TsqeCVNfuTbeaL2Di2qFpxbqAwEAuNX
QFHUXxMm2MldRYII8lWQ/s62me4EGu3SrVJECAzI2PJx7hK5Rbm+7m8zBtpZ5tle
k188QzYpAgMBAAECggEAE79jauHW21y21cgfDWxRfBakDIIjevgNhZhtoHU+3JBZ
nQrSc8qBJUOIzE+8Py+ApAlOxTHP9DLw5pChUBbRgS6KBwh+kaQ+V9WlzLN4V7z+
H8UBrOXu/mpdLKoORq0FLTSOvEseM0tbJumjbIB8p/eMgSqqRZ15f6bFg71MRUBM
1pX6oI8ZPgA9IW1TnnORNVdMTLOf1EZLwATO9TQMA92XAyvlL2uwoxIFO1aieDc9
Q4+oyYbm9dR4M/WGwLHpkHf3rXTZiMB3N0LDA+GncS/AilQdd4BoVK2yWIn+UDIp
R+9IOEEp3sfRUZ+9inNcw8hnOT0jWZxrORIXWBJ+YwKBgQDDUEvrMqrIf9FKBteG
/i5PNybyEflCFbz7MrGxGnjRt//93SsxX5Rt/zLwSdMnvjIctzv/VRq5zTRf3+P1
rJR+vnpJA/AwREvrxO1eomFVZML2FGTKXsimsZAeDX9rEvGg/L4KUmS/S2uqvDHf
qh7LU9z1opxDh3SXenadWBDqNwKBgQDCoBsdWJI3jufnPjIGu5UKbB9jX/5qBU8A
fr8r7uu3+I+64Xz/tPYbZiUjx/rxpI3b6KzUHbUDEpMdqh67/avrzAZzlJmt2jfI
eNq6VQRa5vIzTwHOURYuI26o9U3ABmXdk8cWBoAOxyAE/RUeKlGn9zOEQZYgGUOB
1/j4ZpUynwKBgQCsDBV0L4OlboJr1S8R6OHeQdT6s75/6io4lOVV/t2iz5Seia68
pVdYtc6nQEDS54W5Keed+de7B/o04kIqbUW5iAysON3hhqfiHeyCykM3N7VNk5Vd
drUFsbAj6Pvu1BcpGrpE2WOJ5uQG2BSO04qgzVT8w6snCTE5JlVKMQNlbQKBgHxl
247hSuwKAn4SieU1xqiXvWRGOhZH+FwHp2eMWcwIKs43TC8g2mFe44RAUUxccnPJ
/5XAuy8Qk0nVr7lXBak8ii8cHzI5FYikfqG0r4juroZPDIdz2qp46UVDLYP8UuXS
i+CvHPDVI8ksfm/+epzSa3IwfaVcoIKAqdkTsG9fAoGAab14YbEVFvVH7gmc38/9
sh7ofvyRhNGDEF/nKBs34WpDN3IoItLQDrwBfjRdJKRj9LRmJL/SHW0yakqXNGvq
lCRDRRhKmxfNLigR1gACQxRuomGsrB/FtCcJUMILTtPe3s7Q1o2Uz89fun14aOrA
J4f0mRH0NPpkS0F68k+2nBs=
-----END PRIVATE KEY-----

Adam Adam123 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqowH1By0FrSlhQwFjV0v
BLOfVqGssjvit0MK8I5in3Lzl2LPGASZInniN0w/RoQ6izj26xoTBVBzpm6DO/QW
bt52WidNPZv2kR7S9DgcFYtxvUJq5TySvWulT/XLog5ZabMb6gHfyD/c+aAp4th7
nX2a6paE/zhh/UgNEmQZH1w85d8Z45Nfy3hpQIR3pLQ26bWcLooi78C8YD7Aauth
z129oDF+dI5nLoj8K04wBWm0JKJrLsCLNMVCbGaBMG/qYHwls2/N5EZLKr6k6JO6
B8q/Nd0z4hBJbQLYsDJQZKMBnttFMYVURRe57wM9p+tMUeWS3WTtIm49gk2kDxMU
MQIDAQAB
-----END PUBLIC KEY-----
 -----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqjAfUHLQWtKWF
DAWNXS8Es59WoayyO+K3QwrwjmKfcvOXYs8YBJkieeI3TD9GhDqLOPbrGhMFUHOm
boM79BZu3nZaJ009m/aRHtL0OBwVi3G9QmrlPJK9a6VP9cuiDllpsxvqAd/IP9z5
oCni2HudfZrqloT/OGH9SA0SZBkfXDzl3xnjk1/LeGlAhHektDbptZwuiiLvwLxg
PsBq62HPXb2gMX50jmcuiPwrTjAFabQkomsuwIs0xUJsZoEwb+pgfCWzb83kRksq
vqTok7oHyr813TPiEEltAtiwMlBkowGe20UxhVRFF7nvAz2n60xR5ZLdZO0ibj2C
TaQPExQxAgMBAAECggEABBPMDe9Vvck51xdGwldxV4JvHw0BjPYJYUdYDG3iS7nG
dUdyGyOHjJ9d5cxdUXNzqFBBg1fDmwOOYbiy1wzqljNtt6jIs1J2afwkZbRRWEub
nJx0tT1mILSnIKrlPYH386LhN1QuJEVe9bfA/+C/FI2kG4GpL2wiHcf47R+K+GXt
f3LVq1zy3N3o+YhMg57kFfUfgTUaOSVN4uP8Fmu31msqPcjDh1B/x9g7Zq07Tz7u
zUgvXwQYsEoYtG+tqKHOO+6kFD4HfM6TzA051KYPHabNdLdUgGZ1vlsS9lAz4hI+
zBP1pttY1indVgKYQxMSqEhGYYz9IACW3lxIWEil1QKBgQDZYLVeGqalCnem9jW5
In1YHqnEkvY6dmZpBS4FPdHArfXZ4rMv/HptwNHh1qkgMqlcOANF9nZKDj7Cu6BO
zNIFb9foU0R4Rb3ILEn43gr5XN7SS8ad36ijq5P5W7bII0q0Orzl/Vjk9P1Odzqr
YavvidjWFjn7kKZpdQUQK2ROywKBgQDI2UD1wWWhOKAl4op6MhpH3KDdt8oRXqYx
KS2+XOLHHkV0kfEtSdWl/CDk1BLRCKUQjEEa7FtaxOYU/C6lXSdmblotqjYLHHcn
OvNF0zVFFtxEZBmgBSi4LKGAJRpItjiRKMn5Uu9zr38iTiF4OxjkILx29yDw19Tv
cy75Tj4tcwKBgCHhwAM99jGNUx8UC0WjCZR9mwqHuZddMxM1ennYq+PzeXmPq0xU
dyS6RDyGP/BD1UAJfwEdrExYshGaOx9tL2MnjqioqehxPmZ/+LuwqFc70YNHylp7
LQbtzG+2iuPhFFjJOv5CIeP2B7F+RgfGfo0kmEauSjVa04VmdvaRPN5HAoGAIqrd
O44WLK3JdsCThmP/hUffvGVsy3K63OFus9z0h8oB0w0dw+NqrSvHwbeZR9tmImUT
F8KUQiaaUCT3KDPcCSIjDp7ClUhkiLD0LKk4GKTJgESG58f8L04E0kmVL9fEC8ou
kopuKlmwaAt0W3xX34iG/0HIvcmDR5FqGj4XHWECgYBhu5leUrBMUwLKtLOtmEzy
/WbVxNGt799xM4QjOe4ZCD4JDGFZ7KWYYlgTyvFyAazo3xWLUwsDbjAJzHp5XjXf
P4uMQ/ALUY8GJLSRI8/684ubvHsIA4rlvyKa+MAIrMPNNYWqCkph0osgTggklc5g
WTEtSqX8p/0GROiJQ2cs3A==
-----END PRIVATE KEY-----

